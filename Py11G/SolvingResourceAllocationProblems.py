def max_profit(stores, boxes):
    n = len(stores[0])  # Визначаємо кількість магазинів

    # Створюємо таблицю для зберігання максимального прибутку для кожного магазину з урахуванням кількості ящиків
    dp = [[0 for _ in range(boxes + 1)] for _ in range(n + 1)]

    # Створюємо таблицю для зберігання розподілу ящиків для кожного магазину з урахуванням кількості ящиків
    allocation = [[[] for _ in range(boxes + 1)] for _ in range(n + 1)]
    
    # Проходимо по всіх магазинах
    for i in range(1, n + 1):
        # Проходимо по всіх можливих кількостях ящиків
        for j in range(1, boxes + 1):
            max_profit = 0
            # Проходимо по всіх можливих кількостях ящиків для поточного магазину
            for k in range(j + 1):
                # Обчислюємо поточний прибуток, який можна отримати, розподіливши k ящиків між магазинами
                profit = stores[k][i - 1] + dp[i - 1][j - k]
                # Якщо поточний прибуток більший за максимальний, то оновлюємо максимальний прибуток та розподіл ящиків
                if profit > max_profit:
                    max_profit = profit
                    allocation[i][j] = allocation[i - 1][j - k] + [k]
            # Зберігаємо максимальний прибуток для поточного магазину та кількості ящиків
            dp[i][j] = max_profit
    print(dp),print(allocation)
    # Повертаємо максимальний прибуток та розподіл ящиків для всіх магазинів
    return dp[n][boxes], allocation[n][boxes]

# Вхідні дані: прибуток від кожного магазину для різної кількості ящиків
stores = [
    [0, 0, 0, 0],
    [4, 2, 6, 2],
    [6, 4, 8, 3],
    [7, 6, 8, 4],
    [7, 8, 8, 4],
    [7, 9, 8, 4],
    [7, 10, 8, 4] ]
boxes = 6  # Загальна кількість ящиків

# Викликаємо функцію та отримуємо максимальний прибуток та розподіл ящиків
profit, allocation = max_profit(stores, boxes)

# Виводимо результати
print(f"Максимальний прибуток: {profit}")
print(f"Розподіл ящиків: {allocation}")